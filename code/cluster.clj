
;(load-file "C:/Users/bruno.alessi/Documents/__ebooks__/_javakh/cluster.clj")

(defn sq [x] (* x x))

(defn sq-dif [x1 x2] (sq (- x2 x1)))

(defn abs [x] (if (neg? x) (- x) x))

(defn dist
  ([x1 y1 x2 y2] (Math/sqrt (+ (sq-dif x1 x2) (sq-dif y1 y2))))
  ([x1 y1 z1 x2 y2 z2] (Math/sqrt (+ (sq-dif x1 x2) (sq-dif y1 y2) (sq-dif z1 z2)))))

(defn dist-to [x y z] (partial dist x y z))

(defn dist-0
  ([x y] (Math/sqrt (+ (sq x) (sq y))))
  ([x y z] (Math/sqrt (+ (sq x) (sq y) (sq z)))))


(defn sum-dists [points]
  (let [dist-fns (map (fn [[x1 y1 z1]] (dist-to x1 y1 z1)) points)
        quots (map (fn [[x1 y1 z1]] (Math/log10 (dist-0 x1 y1 z1))) points)
       ]
    (loop [dist-fns' dist-fns sums [] quots' quots]
      (if (empty? dist-fns')
        sums
          (recur 
            (rest dist-fns')
            (conj sums      (/ (reduce + (map #(apply (first dist-fns') %) points)) (first quots'))  )
            (rest quots')
            
            )))))

(defn center [points]
   (let [data (map #(cons %1 %2) (sum-dists points) points)]
      (reduce (fn [[a :as va][b :as vb]] (if (< a b) va vb)) data)))

(defn sum-dists' [points]
  (let [dist-fns (map (fn [[x1 y1 z1]] (dist-to x1 y1 z1)) points)]
    (loop [dist-fns' dist-fns sums []]
      (if (empty? dist-fns')
        sums
          (recur 
            (rest dist-fns')
            (conj sums (reduce + (map #(apply (first dist-fns') %) points))))))))

(defn center' [points]
   (let [data (map #(cons %1 %2) (sum-dists' points) points)]
      (reduce (fn [[a :as va][b :as vb]] (if (< a b) va vb)) data)))

; -------------------------------------------------------------------------------------------

;(def points [[0 0 1][0 0 -1][1 0 0][-1 0 0][0 1 0][0 -1 0][0 0 0]])
;(def points [[0 0 0][4 0 0][2 2 0][2 -2 0][2 0 2][2 0 -2][2 0 0]])

(def points [
   [2.93  1.825   -5.636   ]
   [1.98  3.033   -7.620   ]
   [2.08  2.483   -7.656   ]
   [1.90  2.489   -7.662   ]
   [2.01  3.285   -6.731   ]
   [2.02  2.331   -9.788   ]
   [0.76  3.312   -9.315   ]
   [1.28  2.669   -7.496   ]
   [1.99  0.631   -8.122   ]
   [2.31  1.185   -7.617   ]
   [2.18  1.442   -7.769   ]
   [3.53  38.980   25.952  ]
   [4.10  14.754   -16.028 ]
   [1.65  -3.084   -3.654  ]
   [1.61  8.083   1.874    ]
   [4.15  29.030   -12.700 ]
   [2.88  1.806   -4.612   ]
   [1.63  1.964   -5.926   ]
   [0.29  -1.439   -4.876  ]
   [1.50  -0.703   -1.912  ]
   [1.40  30.242   -10.480 ]
   [0.71  14.298   2.202   ]
   [1.89  -8.349   -13.470 ]
   [1.43  4.308   -6.862   ]
   [16.27 -4.090   16.327  ]
   [-0.16 -1.738   -1.343  ]
   [0.82  2.901   -4.025   ]
   [1.98  11.779   0.705   ]
   [7.16  49.590   44.771  ]
   [8.73  -4.322   -63.402 ]
   [1.53  -9.373   -23.941 ]
   [3.82  -8.442   -35.232 ]
   [2.94  22.371   -13.186 ]
   [2.01  -33.273  -26.651 ]
   [2.58  1.694   -9.415   ]
   [1.78  -12.830  -1.938  ]
   [1.25  -5.314   -2.456  ]
   [2.12  4.829   -15.068  ]
   [5.45  0.449   -42.964  ]
   [1.43  9.023   -5.268   ]
   [0.41  -0.644   -2.561  ]
   [1.66  3.537   -6.700   ]
   [0.29  -3.446   -5.903  ]
   [0.66  -0.083   -2.034  ]
   [1.84  3.016   -7.068   ]
   [2.22  1.721   -7.914   ]
   [1.22  11.474   3.073   ]
   [1.78  5.517   0.618    ]
   [0.82  1.546   4.430    ]
   [3.02  12.068   -10.225 ]
   [2.82  10.374   -23.669 ]
   [2.04  -5.122   -4.353  ]
   [0.89  -4.901   -0.998  ]
])

; 

(center points)

;(reduce #(if (< %1 %2) %1 %2) [1 2 3 0 -1 6])
;(reduce (fn [[_ a :as va][_ b :as vb]] (if (< a b) va vb)) [[1 2][3 0][-1 6]])

(def points2 [
   [2.07   4.145    1.272]
   [0.83   2.364    3.179]
   [0.28   3.529    4.614]
   [3.80   9.803    4.616]
   [0.53   5.433    5.462]
   [0.23   4.771    8.208]
   [1.95   5.421    9.980]
   [1.29   2.149   -0.134]
   [0.29  -1.445   -0.156]
   [3.98  -4.344   -0.677]
   [1.23   3.101   -1.034]
   [1.62  -0.322   -1.462]
   [2.64   6.884   -1.869]
   [2.49  -2.733   -3.412]
   [1.09  -0.735   -3.710]
   [2.48  -3.517   -3.863]
   [0.55  -1.552   -4.269]
   [1.32  -7.433   -4.641]
   [1.37  -1.784   -5.222]
   [0.74  -6.030   -5.360]
   [0.59   4.550   -5.610]
   [2.16   7.013   -6.199]
   [1.18   0.032   -6.622]
   [1.39   2.153   -7.015]
   [2.85   0.149   -7.020]
   [4.69   2.117   -7.967]
   [0.98  -1.024   -8.518]
   [1.14   9.749   -8.604]
   [0.83  -3.064  -10.224]
   [2.46   3.012  -10.348]
   [1.61  -0.424  -10.380]
   [2.04  -3.335  -10.596]
   [3.17  -6.620  -20.221]
   [3.14   4.840  -21.586]
   [3.06   3.484  -23.762]
   [2.96   1.323  -25.340]
   [3.58  -0.643  -25.382]
   [1.59   0.061  -25.433]
   [2.90   0.668  -25.965]
   [3.67  -0.805  -25.998]
   [3.09  -1.254  -26.288]
   [3.97  -1.819  -26.311]
   [4.78  -2.740  -26.403]
   [3.01   1.144  -26.443]
   [3.00  -1.172  -26.486]
   [3.10  -0.028  -26.686]
   [3.51  -0.988  -26.731]
   [2.47  -0.397  -26.860]
   [2.88   0.472  -26.925]
   [4.00  -1.026  -27.253]
   [3.00  -0.226  -27.381]
   [2.25  -3.207  -27.414]
   [3.57  -0.186  -27.557]
   [3.35  -0.481  -27.614]
   [2.68  -0.427  -27.794]
   [3.35  -1.194  -27.853]
   [3.48  -2.397  -28.153]
   [3.74  -4.375  -29.915]
   [3.56  -4.777  -30.231]
   [3.31  -3.045  -30.797]
   [3.29  -6.377  -31.030]
   [3.98 -17.551  -40.924]
])

(center points2) ;com div (32.309674933894094 3.51 -0.988 -26.731) com log em quots (598.7859121497703 3.58 -0.643 -25.382)
(center points)  ;com div (47.301579896176534 5.45 0.449 -42.964)  com log em quots (702.2394253026066 2.02 2.331 -9.788)

(center' points) ;(668.762649644946 1.84 3.016 -7.068)      ==> (2.0, 2.5, -7.5)
(center' points2);(801.427732530241 1.61 -0.424 -10.38)     ==> ~com log em quots

;(doall (map println (sum-dists points2)))
